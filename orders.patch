diff --git a/omw-fe/src/App.jsx b/omw-fe/src/App.jsx
index fba2eb5..8f48ea9 100644
--- a/omw-fe/src/App.jsx
+++ b/omw-fe/src/App.jsx
@@ -9,8 +9,8 @@ const navItems = [
   },
   {
     id: 1,
-    icon: 'uil:user',
-    route: '/profile',
+    icon: 'uil:users-alt',
+    route: '/workers',
   },
   {
     id: 2,
@@ -20,7 +20,7 @@ const navItems = [
   {
     id: 3,
     icon: 'uil:truck',
-    route: '/delivery',
+    route: '/orders',
   },
   {
     id: 4,
diff --git a/omw-fe/src/components/Navigation.jsx b/omw-fe/src/components/Navigation.jsx
index 69ce802..90cc407 100644
--- a/omw-fe/src/components/Navigation.jsx
+++ b/omw-fe/src/components/Navigation.jsx
@@ -1,9 +1,10 @@
 import React, { useState } from 'react';
 import { Icon } from '@iconify/react';
-import { Link } from 'react-router-dom';
+import { Link, useLocation } from 'react-router-dom';
 
 export default function Navigation({ navItems }) {
-  const [activeId, setActiveId] = useState(navItems[0].id);
+  const location = useLocation();
+  const [activeId, setActiveId] = useState(location.pathname);
   return (
     <>
       <div className="shadow-xl w-20 flex flex-col items-center justify-center h-full bg-slate-200 gap-4">
@@ -11,14 +12,14 @@ export default function Navigation({ navItems }) {
           <Link key={id} to={route}>
             <div
               className={`${
-                activeId === id ? 'bg-slate-50' : ''
+                activeId === route ? 'bg-slate-50' : ''
               } hover:bg-slate-50 w-14 h-14 flex items-center justify-center rounded-xl cursor-pointer`}
-              onClick={() => setActiveId(id)}
+              onClick={() => setActiveId(route)}
             >
               <Icon
                 icon={icon}
                 className={`text-4xl ${
-                  activeId === id ? 'text-slate-600' : 'text-slate-300'
+                  activeId === route ? 'text-slate-600' : 'text-slate-300'
                 }`}
               />
             </div>
diff --git a/omw-fe/src/pages/OrderPage.jsx b/omw-fe/src/pages/OrderPage.jsx
new file mode 100644
index 0000000..17e9736
--- /dev/null
+++ b/omw-fe/src/pages/OrderPage.jsx
@@ -0,0 +1,253 @@
+import React, { useContext, useEffect, useRef, useState } from 'react';
+import { Button, Form, Input, Popconfirm, Table, Statistic, Tag } from 'antd';
+import { Link } from 'react-router-dom';
+
+const EditableContext = React.createContext(null);
+const EditableRow = ({ index, ...props }) => {
+  const [form] = Form.useForm();
+  return (
+    <Form form={form} component={false}>
+      <EditableContext.Provider value={form}>
+        <tr {...props} />
+      </EditableContext.Provider>
+    </Form>
+  );
+};
+const EditableCell = ({
+  title,
+  editable,
+  children,
+  dataIndex,
+  record,
+  handleSave,
+  ...restProps
+}) => {
+  const [editing, setEditing] = useState(false);
+  const inputRef = useRef(null);
+  const form = useContext(EditableContext);
+  useEffect(() => {
+    if (editing) {
+      inputRef.current.focus();
+    }
+  }, [editing]);
+  const toggleEdit = () => {
+    setEditing(!editing);
+    form.setFieldsValue({
+      [dataIndex]: record[dataIndex],
+    });
+  };
+  const save = async () => {
+    try {
+      const values = await form.validateFields();
+      toggleEdit();
+      handleSave({
+        ...record,
+        ...values,
+      });
+    } catch (errInfo) {
+      console.log('Save failed:', errInfo);
+    }
+  };
+  let childNode = children;
+  if (editable) {
+    childNode = editing ? (
+      <Form.Item
+        style={{
+          margin: 0,
+        }}
+        name={dataIndex}
+        rules={[
+          {
+            required: true,
+            message: `${title} is required.`,
+          },
+        ]}
+      >
+        <Input ref={inputRef} onPressEnter={save} onBlur={save} />
+      </Form.Item>
+    ) : (
+      <div
+        className="editable-cell-value-wrap"
+        style={{
+          paddingRight: 24,
+        }}
+        onClick={toggleEdit}
+      >
+        {children}
+      </div>
+    );
+  }
+  return <td {...restProps}>{childNode}</td>;
+};
+const OrderPage = () => {
+  const [dataSource, setDataSource] = useState([
+    {
+      key: '0',
+      name: 'Edward King 0',
+      status: 'New',
+      orderDate: '12/12/2020',
+      assignedTo: 'David',
+    },
+    {
+      key: '1',
+      name: 'Edward King 0',
+      status: 'In Progress',
+      orderDate: '12/11/2020',
+      assignedTo: 'Chris',
+    },
+  ]);
+  const [count, setCount] = useState(2);
+  const handleDelete = (key) => {
+    const newData = dataSource.filter((item) => item.key !== key);
+    setDataSource(newData);
+  };
+  const defaultColumns = [
+    {
+      title: 'Customer Name/Supplier Name',
+      dataIndex: 'name',
+      editable: true,
+    },
+    {
+      title: 'Status',
+      dataIndex: 'status',
+      editable: true,
+      render: (tag) => {
+        let color = '';
+        switch (tag) {
+          case 'New':
+            color = 'purple';
+            break;
+          case 'In Progress':
+            color = 'blue';
+            break;
+          case 'Completed':
+            color = 'green';
+            break;
+          case 'Cancelled':
+            color = 'red';
+            break;
+          default:
+            color = '';
+            break;
+        }
+        return <span>{<Tag color={color}>{tag}</Tag>}</span>;
+      },
+      filters: [
+        {
+          text: 'New',
+          value: 'New',
+        },
+        {
+          text: 'In Progress',
+          value: 'In Progress',
+        },
+        {
+          text: 'Completed',
+          value: 'Completed',
+        },
+        {
+          text: 'Cancelled',
+          value: 'Cancelled',
+        },
+      ],
+      onFilter: (value, record) => record.status.indexOf(value) === 0,
+    },
+    {
+      title: 'Order Date',
+      dataIndex: 'orderDate',
+      editable: true,
+    },
+    {
+      title: 'Assigned To',
+      dataIndex: 'assignedTo',
+      editable: true,
+      render: (assignedTo) => {
+        return <Link to={`workers/${assignedTo}`}>{assignedTo}</Link>;
+      },
+    },
+    {
+      title: 'Action',
+      dataIndex: 'action',
+      render: (_, record) =>
+        dataSource.length >= 1 ? (
+          <Popconfirm
+            title="Are you sure?"
+            onConfirm={() => handleDelete(record.key)}
+          >
+            <Button>Delete</Button>
+          </Popconfirm>
+        ) : null,
+    },
+  ];
+  const handleAdd = () => {
+    const newData = {
+      key: count,
+      name: `John Smith ${count}`,
+      status: 'New',
+      orderDate: new Date().toString(),
+      assignedTo: `David ${count}`,
+    };
+    setDataSource([...dataSource, newData]);
+    setCount(count + 1);
+  };
+  const handleSave = (row) => {
+    const newData = [...dataSource];
+    const index = newData.findIndex((item) => row.key === item.key);
+    const item = newData[index];
+    newData.splice(index, 1, {
+      ...item,
+      ...row,
+    });
+    setDataSource(newData);
+  };
+  const components = {
+    body: {
+      row: EditableRow,
+      cell: EditableCell,
+    },
+  };
+  const columns = defaultColumns.map((col) => {
+    if (!col.editable) {
+      return col;
+    }
+    return {
+      ...col,
+      onCell: (record) => ({
+        record,
+        editable: col.editable,
+        dataIndex: col.dataIndex,
+        title: col.title,
+        handleSave,
+      }),
+    };
+  });
+  return (
+    <div className="m-6 w-full">
+      <div className="flex items-end mb-4">
+        <Statistic
+          className="flex-1"
+          title="Total orders"
+          value={dataSource.length}
+        />
+        <Button
+          className=""
+          onClick={handleAdd}
+          type="primary"
+          style={{
+            marginBottom: 16,
+          }}
+        >
+          Add a row
+        </Button>
+      </div>
+      <Table
+        components={components}
+        rowClassName={() => 'editable-row'}
+        bordered
+        dataSource={dataSource}
+        columns={columns}
+      />
+    </div>
+  );
+};
+export default OrderPage;
diff --git a/omw-fe/src/pages/SectionsPage.jsx b/omw-fe/src/pages/SectionsPage.jsx
index 3dedc25..725478b 100644
--- a/omw-fe/src/pages/SectionsPage.jsx
+++ b/omw-fe/src/pages/SectionsPage.jsx
@@ -8,7 +8,7 @@ export default function SectionsPage({ sections }) {
   const selectedSection = sections.find(({ id }) => activeId === id);
   return (
     <>
-      <div className="rounded-tr-3xl rounded-br-3xl grow shadow-xl p-4 flex flex-col justify-between">
+      <div className="grow shadow-xl p-4 flex flex-col justify-between">
         <Section name={selectedSection.name} slots={selectedSection.slots} />
         <SectionList
           sections={sections}
@@ -16,7 +16,7 @@ export default function SectionsPage({ sections }) {
           setActiveId={setActiveId}
         />
       </div>
-      <div className="rounded-3xl p-4">
+      <div className="p-4">
         <Delivery />
       </div>
     </>
diff --git a/omw-fe/src/router.js b/omw-fe/src/router.js
index ed4058b..fd389cd 100644
--- a/omw-fe/src/router.js
+++ b/omw-fe/src/router.js
@@ -1,6 +1,7 @@
 import { createBrowserRouter } from 'react-router-dom';
 import App from './App';
 import ErrorPage from './pages/ErrorPage';
+import OrderPage from './pages/OrderPage';
 import SectionsPage from './pages/SectionsPage';
 import SettingsPage from './pages/SettingsPage';
 
@@ -243,6 +244,10 @@ const router = createBrowserRouter([
         path: '/sections',
         element: <SectionsPage sections={sections} />,
       },
+      {
+        path: '/orders',
+        element: <OrderPage />,
+      },
       {
         path: '/settings',
         element: <SettingsPage />,
